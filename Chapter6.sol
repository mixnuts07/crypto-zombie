// web3.js .. Ethereum FoundationのJavaScriptライブラリ

・コントラクトの呼び出し
イーサリアムのネットワークは、ブロックチェーンのコピーをそれぞれ持ったノードで構成されていることを思い出すのだ。
スマートコントラクトの関数を呼び出したい時、これらノードのどれか一つをクエリする必要がある:

スマートコントラクトのアドレス
呼び出したい関数。そして、
その関数に渡したい変数


イーサリアムのノードは、人間が読むことができない JSON-RPC という言語でのみ会話する。
コントラクトの関数を呼び出したいとノードに伝えるクエリはこんな感じのものだ:

// うむ...関数呼び出しは全てこうやって書くのだ、頑張れ!
{"jsonrpc":"2.0","method":"eth_sendTransaction","params":
[{"from":"0xb60e8dd61c5d32be8058bb8eb970870f07233155","to":
"0xd46e8dd67c5d32be8058bb8eb970870f07244567","gas":"0x76c0",
"gasPrice":"0x9184e72a000","value":"0x9184e72a","data":
"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"}],"id":1}



幸運にもWeb3.jsはサーフェイスの下にこの面倒なクエリを隠してくれるから、
便利で読みやすいJavaScriptインターフェイスとやり取りするだけで良い。

上のクエリを構成する代わりに、コード中で関数を呼び出すのはこんな感じになる:

cryptoZombies.methods.createRandomZombie("Vitalik Nakamoto 🤔")
  .send({ from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155", gas: "3000000" })
  
  
・install
// NPMを使用
npm install web3

// Yarnを使用
yarn add web3

// Bowerを使用
bower install web3


・web3プロバイダ(infura) .. どのノード に読み書きを処理させるよう働き掛けるかをコードに教えてくれる。(APIの様なもの)→URLの設定みたいなやつ。

よし! Web3.jsがプロジェクトで使えるようになったから、今度はこれを初期化してブロックチェーンにアクセスできるようにしていこう。

まず必要なのは、 Web3プロバイダ というものだ。

イーサリアムは ノード で構成されていて、全ノードが同じデータのコピーをシェアしていることを覚えているだろうか。
Web3.jsにおけるWeb3プロバイダの設定は、 どのノード に読み書きを処理させるよう働き掛けるかをコードに教えてくれる。
これは従来のウェブアプリでAPIコールをするためにリモートのウェブサーバーのURLを設定するようなものだ。

自分のイーサリアム・ノードをプロバイダとして運営することも可能だが、
もっと手軽なサードパーティのサービスがあるから、DAppのユーザーのために自分のイーサリアム・ノードをもつ必要はない。
そのサービスとは Infura だ。


・infura
Infura とは、高速な読み込みのためのキャッシュレイヤーをもつイーサリアム・ノードのセットを保持するサービスで、
API経由でこれらノードに無料でアクセスで可能だ。 
Infuraをプロバイダとして使用することで、自分のノードをセットアップして維持しなくても、イーサリアムブロックチェーンとメッセージをしっかりと送受信できる。
Ex.
var web3 = new Web3(new Web3.providers.WebsocketProvider("wss://mainnet.infura.io/ws"));


・秘密鍵管理(Metamask)
だが我々のDAppは今後多くのユーザーが使用し、彼らはブロックチェーンの読み取りだけでなく書き込みも行っていく
- だからユーザーが秘密鍵でトランザクションに署名する方法が必要となるのだ。


注：イーサリアム（そして一般的なブロックチェーン）は、
トランザクションにデジタル署名をするために公開鍵/秘密鍵のペアを使用します。
これはデジタル署名向けの非常に安全なパスワードであると考えてください。
このようにして、もしあなたがブロックチェーンのデータを変更すると、
あなたは自分の公開鍵を通じてそれを署名した人であると証明することができます。
しかし誰もあなたの秘密鍵は知らないので、あなたに代わってトランザクションを偽造することはできません。

暗号化の方法は複雑だから、お主がセキュリティの専門家で何を行っているかを本当にわかっているわけでもない限り、
アプリのフロントエンドでユーザーの秘密鍵を自ら管理しようとするのは良い考えではない。

だがラッキーなことに秘密鍵管理の必要はない
— すでにこれを行ってくれるサービスがあるのだ。中でももっともポピュラーなサービスは Metamask だ。


・Metamask
MetamaskはChromeとFirefoxのブラウザ拡張機能で、
ユーザーは自分のイーサリアム・アカウントと秘密鍵を安全に管理し、
そのアカウントでWeb3.jsを使用しているウェブサイトとやりとりすることが可能だ
（もし以前使ったことがなければ、絶対にインストールしたいはずだ 
- 自分のブラウザがWeb3に対応して、イーサリアムのブロックチェーンと通信するウェブサイトと対話できるようになるのだ！)。

そして（我々がCryptoZombiesゲームでやっているように）
ユーザーにブラウザのウェブサイトを通してDAppとやりとりさせたい場合、
開発者としてMetamaskと互換性のあるものにしたいと絶対思うだろう。

注: Metamaskは、先ほどやったようにInfuraのサーバーをWeb3プロバイダーとして使用しますが
、Web3プロバイダーを選択するオプションも提供しています。
MetamaskのWeb3プロバイダを使用することでユーザーに選択肢を与えるので、アプリでの懸念事項が少なくなります。


